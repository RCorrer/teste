import pulp
import pandas as pd
from collections import defaultdict

def otimizar_transporte(df_saldos, df_rotas):
    """
    Otimiza o transporte com os seguintes critérios:
    1. Abastece todas as praças com saldo negativo
    2. Minimiza o custo total de transporte
    3. Considera capacidade fixa e custo fixo por rota
    4. Mostra saldos antes e depois
    5. Contabiliza quantas vezes cada rota foi usada
    
    Parâmetros:
    df_saldos - DataFrame com colunas: PRACA, SALDO
    df_rotas - DataFrame com colunas: ORIGEM, DESTINO, EMPRESA, VALOR_TRANSPORTADO, CUSTO
    
    Retorna:
    Dicionário com:
    - 'rotas_ativas': DataFrame com rotas utilizadas e quantas vezes
    - 'saldo_pracas': DataFrame com saldos inicial e final
    - 'custo_total': Custo total da operação
    - 'status': Status da solução
    """
    
    # Preparação dos dados
    df_rotas = df_rotas.copy()
    df_rotas['ROTA_ID'] = range(len(df_rotas))  # ID único para cada rota
    
    # Dicionários para saldos
    saldo_inicial = df_saldos.set_index('PRACA')['SALDO'].to_dict()
    pracas = list(saldo_inicial.keys())
    
    # Criar problema de otimização
    prob = pulp.LpProblem("Abastecimento_Pracas_Negativas", pulp.LpMinimize)
    
    # Variáveis de decisão (binárias: usa ou não usa a rota)
    var_rota = pulp.LpVariable.dicts(
        'usar_rota', 
        df_rotas['ROTA_ID'].tolist(), 
        cat=pulp.LpBinary
    )
    
    # Função objetivo: Minimizar custo total
    prob += pulp.lpSum(
        var_rota[row['ROTA_ID']] * row['CUSTO'] 
        for _, row in df_rotas.iterrows()
    )
    
    # Restrições
    
    ## 1. Não exceder saldo nas origens
    for praca in pracas:
        if saldo_inicial[praca] > 0:  # Só praças com saldo positivo podem enviar
            prob += pulp.lpSum(
                var_rota[row['ROTA_ID']] * row['VALOR_TRANSPORTADO']
                for _, row in df_rotas[df_rotas['ORIGEM'] == praca].iterrows()
            ) <= saldo_inicial[praca]
    
    ## 2. Atender TODAS as demandas negativas
    for praca in pracas:
        if saldo_inicial[praca] < 0:  # Só praças com saldo negativo precisam receber
            prob += pulp.lpSum(
                var_rota[row['ROTA_ID']] * row['VALOR_TRANSPORTADO']
                for _, row in df_rotas[df_rotas['DESTINO'] == praca].iterrows()
            ) >= -saldo_inicial[praca]  # Transforma saldo negativo em demanda positiva
    
    # Resolver o problema
    prob.solve()
    
    # Processar resultados
    if pulp.LpStatus[prob.status] == 'Optimal':
        # Rotas ativadas
        rotas_ativas = []
        for _, row in df_rotas.iterrows():
            if var_rota[row['ROTA_ID']].value() == 1:
                rotas_ativas.append({
                    'ORIGEM': row['ORIGEM'],
                    'DESTINO': row['DESTINO'],
                    'EMPRESA': row['EMPRESA'],
                    'VALOR_TRANSPORTADO': row['VALOR_TRANSPORTADO'],
                    'CUSTO': row['CUSTO']
                })
        
        df_rotas_ativas = pd.DataFrame(rotas_ativas)
        
        # Calcular quantas vezes cada rota única foi usada
        df_uso_rotas = df_rotas_ativas.groupby(
            ['ORIGEM', 'DESTINO', 'EMPRESA', 'VALOR_TRANSPORTADO', 'CUSTO']
        ).size().reset_index(name='VEZES_USADA')
        
        # Calcular saldos finais
        saldo_final = saldo_inicial.copy()
        transporte_saida = defaultdict(int)
        transporte_entrada = defaultdict(int)
        
        for _, rota in df_rotas_ativas.iterrows():
            transporte_saida[rota['ORIGEM']] += rota['VALOR_TRANSPORTADO']
            transporte_entrada[rota['DESTINO']] += rota['VALOR_TRANSPORTADO']
        
        for praca in pracas:
            saldo_final[praca] = saldo_final[praca] - transporte_saida.get(praca, 0) + transporte_entrada.get(praca, 0)
        
        # DataFrame de saldos
        df_saldos_resultado = pd.DataFrame({
            'PRACA': pracas,
            'SALDO_INICIAL': [saldo_inicial[p] for p in pracas],
            'SALDO_FINAL': [saldo_final[p] for p in pracas],
            'DIFERENCA': [saldo_final[p] - saldo_inicial[p] for p in pracas]
        })
        
        # Custo total
        custo_total = sum(var_rota[row['ROTA_ID']].value() * row['CUSTO'] for _, row in df_rotas.iterrows())
        
        return {
            'rotas_ativas': df_uso_rotas,
            'saldo_pracas': df_saldos_resultado,
            'custo_total': custo_total,
            'status': 'Ótimo encontrado',
            'transporte_total': df_rotas_ativas['VALOR_TRANSPORTADO'].sum()
        }
    else:
        return {
            'status': f"Solução não encontrada: {pulp.LpStatus[prob.status]}",
            'rotas_ativas': pd.DataFrame(),
            'saldo_pracas': pd.DataFrame(),
            'custo_total': 0
        }

# Exemplo de uso
if __name__ == "__main__":
    # Dados de exemplo
    data_saldos = {
        'PRACA': ['A', 'B', 'C', 'D', 'E', 'F'],
        'SALDO': [300, 400, -150, -200, -250, -100]
    }
    
    data_rotas = {
        'ORIGEM': ['A', 'A', 'B', 'B', 'B', 'A', 'B', 'F'],
        'DESTINO': ['C', 'D', 'D', 'E', 'C', 'E', 'F', 'E'],
        'EMPRESA': ['T1', 'T1', 'T2', 'T2', 'T3', 'T3', 'T4', 'T5'],
        'VALOR_TRANSPORTADO': [100, 150, 120, 130, 110, 90, 80, 70],
        'CUSTO': [500, 700, 600, 750, 550, 650, 450, 400]
    }
    
    df_saldos = pd.DataFrame(data_saldos)
    df_rotas = pd.DataFrame(data_rotas)
    
    # Executar a otimização
    resultado = otimizar_transporte(df_saldos, df_rotas)
    
    # Exibir resultados
    print("\n" + "="*50)
    print(f"Status: {resultado['status']}")
    print(f"Custo Total: R${resultado['custo_total']:,.2f}")
    print(f"Volume Total Transportado: {resultado['transporte_total']} unidades")
    
    print("\nSaldos das Praças:")
    print(resultado['saldo_pracas'].to_string(index=False))
    
    print("\nRotas Utilizadas:")
    print(resultado['rotas_ativas'].to_string(index=False))
