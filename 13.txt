import pulp
import pandas as pd
from collections import defaultdict

def otimizar_transporte_rede(df_saldos, df_rotas):
    """
    Otimização de rede com múltiplos níveis de transporte:
    1. Abastece TODAS as praças negativas completamente (diretamente ou via intermediárias)
    2. Minimiza custo total
    3. Capacidade e custo fixos por rota
    4. Mostra saldos antes/depois
    5. Conta usos de cada rota
    6. Regra especial para SAQUE BB (ignora saldo origem)
    7. Garante saldo não-negativo em todas as praças ao final
    8. Considera transporte em múltiplas etapas através da rede
    
    Parâmetros:
    df_saldos - DataFrame com: PRACA, SALDO
    df_rotas - DataFrame com: ORIGEM, DESTINO, EMPRESA, VALOR_TRANSPORTADO, CUSTO
    
    Retorna:
    Dicionário com resultados completos
    """
    
    # Preparação dos dados
    df_rotas = df_rotas.copy()
    df_rotas['ROTA_ID'] = range(len(df_rotas))
    saldo_inicial = df_saldos.set_index('PRACA')['SALDO'].to_dict()
    pracas = list(saldo_inicial.keys())
    
    # Criar problema
    prob = pulp.LpProblem("Otimizacao_Rede_Transporte", pulp.LpMinimize)
    
    # Variáveis de decisão
    var_rota = pulp.LpVariable.dict(
        'usar_rota', 
        df_rotas['ROTA_ID'].tolist(), 
        cat=pulp.LpBinary
    )
    
    # Variáveis auxiliares para fluxo acumulado (envios e recebimentos)
    envios = pulp.LpVariable.dict(
        'envios', 
        pracas,
        lowBound=0
    )
    
    recebimentos = pulp.LpVariable.dict(
        'recebimentos', 
        pracas,
        lowBound=0
    )
    
    # Função objetivo: minimizar custo total
    prob += pulp.lpSum(
        var_rota[row['ROTA_ID']] * row['CUSTO'] 
        for _, row in df_rotas.iterrows()
    )
    
    # Restrições
    
    ## 1. Não exceder saldo nas origens (exceto SAQUE BB)
    for praca in pracas:
        if saldo_inicial[praca] > 0:
            rotas_nao_bb = df_rotas[
                (df_rotas['ORIGEM'] == praca) & 
                (df_rotas['EMPRESA'] != 'SAQUE BB')
            ]
            prob += pulp.lpSum(
                var_rota[row['ROTA_ID']] * row['VALOR_TRANSPORTADO']
                for _, row in rotas_nao_bb.iterrows()
            ) <= saldo_inicial[praca]
    
    ## 2. Atender TODAS as demandas negativas (considerando fluxo total recebido)
    for praca in pracas:
        if saldo_inicial[praca] < 0:
            prob += recebimentos[praca] >= -saldo_inicial[praca]
    
    ## 3. Garantir saldo não-negativo em TODAS as praças ao final
    for praca in pracas:
        prob += (saldo_inicial[praca] - envios[praca] + recebimentos[praca]) >= 0
    
    ## 4. Relacionar envios/recebimentos com as rotas ativas
    for praca in pracas:
        # Total enviado da praça (exceto SAQUE BB)
        prob += envios[praca] == pulp.lpSum(
            var_rota[row['ROTA_ID']] * row['VALOR_TRANSPORTADO']
            for _, row in df_rotas[
                (df_rotas['ORIGEM'] == praca) &
                (df_rotas['EMPRESA'] != 'SAQUE BB')
            ].iterrows()
        )
        
        # Total recebido na praça
        prob += recebimentos[praca] == pulp.lpSum(
            var_rota[row['ROTA_ID']] * row['VALOR_TRANSPORTADO']
            for _, row in df_rotas[df_rotas['DESTINO'] == praca].iterrows()
        )
    
    ## 5. Permitir transporte em múltiplas etapas:
    # Se uma praça recebe, pode enviar (dentro do saldo disponível)
    # Isso é implicitamente tratado pelas restrições de saldo e envios/recebimentos
    
    # Resolver
    prob.solve()
    
    # Processar resultados
    if pulp.LpStatus[prob.status] == 'Optimal':
        # Rotas ativadas
        rotas_ativas = []
        for _, row in df_rotas.iterrows():
            if var_rota[row['ROTA_ID']].value() == 1:
                rotas_ativas.append(row.to_dict())
        
        df_rotas_ativas = pd.DataFrame(rotas_ativas)
        
        # Calcular saldos finais
        saldo_final = {}
        for praca in pracas:
            # SAQUE BB não consome saldo da origem
            envios_total = df_rotas_ativas[
                (df_rotas_ativas['ORIGEM'] == praca) &
                (df_rotas_ativas['EMPRESA'] != 'SAQUE BB')
            ]['VALOR_TRANSPORTADO'].sum()
            
            recebimentos_total = df_rotas_ativas[
                df_rotas_ativas['DESTINO'] == praca
            ]['VALOR_TRANSPORTADO'].sum()
            
            saldo_final[praca] = saldo_inicial[praca] - envios_total + recebimentos_total
        
        # Agrupar rotas idênticas
        df_uso_rotas = df_rotas_ativas.groupby(
            ['ORIGEM', 'DESTINO', 'EMPRESA', 'VALOR_TRANSPORTADO', 'CUSTO']
        ).size().reset_index(name='VEZES_USADA')
        
        return {
            'rotas_ativas': df_uso_rotas,
            'saldo_pracas': pd.DataFrame({
                'PRACA': pracas,
                'SALDO_INICIAL': [saldo_inicial[p] for p in pracas],
                'SALDO_FINAL': [saldo_final[p] for p in pracas],
                'DIFERENCA': [saldo_final[p] - saldo_inicial[p] for p in pracas]
            }),
            'custo_total': sum(var_rota[id].value() * row['CUSTO'] 
                           for id, row in df_rotas.set_index('ROTA_ID').iterrows()),
            'status': 'Ótimo encontrado',
            'transporte_total': df_rotas_ativas['VALOR_TRANSPORTADO'].sum(),
            'envios': {p: envios[p].value() for p in pracas},
            'recebimentos': {p: recebimentos[p].value() for p in pracas}
        }
    else:
        return {
            'status': f"Solução não encontrada: {pulp.LpStatus[prob.status]}",
            'rotas_ativas': pd.DataFrame(),
            'saldo_pracas': pd.DataFrame(),
            'custo_total': 0,
            'envios': {},
            'recebimentos': {}
        }

# Exemplo de uso
if __name__ == "__main__":
    # Dados de exemplo com rede mais complexa
    data_saldos = {
        'PRACA': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'X'],
        'SALDO': [150, 200, -80, -120, -100, 50, -50, 0]  # X é fonte externa (SAQUE BB)
    }
    
    data_rotas = {
        'ORIGEM': ['A', 'A', 'B', 'B', 'B', 'F', 'G', 'X', 'X', 'A', 'C', 'D'],
        'DESTINO': ['C', 'D', 'D', 'E', 'C', 'E', 'F', 'C', 'E', 'F', 'E', 'E'],
        'EMPRESA': ['T1', 'T1', 'T2', 'T2', 'SAQUE BB', 'T3', 'T4', 'SAQUE BB', 'SAQUE BB', 'T5', 'T6', 'T7'],
        'VALOR_TRANSPORTADO': [50, 60, 70, 80, 90, 40, 30, 100, 120, 20, 30, 40],
        'CUSTO': [500, 600, 700, 800, 900, 400, 300, 1000, 1200, 200, 300, 400]
    }
    
    df_saldos = pd.DataFrame(data_saldos)
    df_rotas = pd.DataFrame(data_rotas)
    
    # Executar otimização
    resultado = otimizar_transporte_rede(df_saldos, df_rotas)
    
    # Exibir resultados
    print("\n" + "="*60)
    print(f"Status: {resultado['status']}")
    print(f"Custo Total: R${resultado['custo_total']:,.2f}")
    print(f"Volume Transportado: {resultado['transporte_total']} unidades")
    
    print("\nSaldos:")
    print(resultado['saldo_pracas'].to_string(index=False))
    
    print("\nRotas Utilizadas:")
    print(resultado['rotas_ativas'].to_string(index=False))
    
    print("\nFluxos na Rede:")
    fluxos = pd.DataFrame({
        'PRACA': resultado['saldo_pracas']['PRACA'],
        'ENVIADO': [resultado['envios'][p] for p in resultado['saldo_pracas']['PRACA']],
        'RECEBIDO': [resultado['recebimentos'][p] for p in resultado['saldo_pracas']['PRACA']]
    })
    print(fluxos.to_string(index=False))
